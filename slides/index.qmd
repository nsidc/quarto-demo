---
title: "Quarto Demo"
subtitle: "What does it do? Does it do things? Let's find out! üê¥"
footer: "<https://nsidc.github.io/quarto-demo>"
logo: "https://nsidc.org/themes/custom/nsidc/logo.svg"
background-image: "https://images.pexels.com/photos/10294562/pexels-photo-10294562.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
---

# About

## About Quarto

‚å®Ô∏è Written in TypeScript.

‚ù§Ô∏è Very responsive development team.

üì§ Focused on publishing: websites, books, PDFs, slide decks.

‚úçÔ∏è Authoring in Markdown.


## Examples

* Performs computations (requires Jupyter dependency): 

  ```{python}
  #| echo: true
  import math
  math.tau > math.pi
  ```

* Renders rich text:

  $$\large\tau > \pi$$

* Renders many output formats (_like this slide deck!_)


## Output formats {.smaller}

:::::: {.columns}

::: {.column width="50%"}
* Documents
    * HTML
    * PDF
    * Word
    * OpenOffice
    * ePub
* Presentations
    * RevealJS (these slides)
    * PowerPoint
    * Beamer
:::

::: {.column width="50%"}
* Markdown dialects
* Wikis
* Jupyter Notebooks
* Org-Mode
* [_Much more_](https://quarto.org/docs/output-formats/all-formats.html)
:::

::::::


## Quarto vs. Jupyter ecosystem

* Quarto is focused on publishing to many formats (via Pandoc).
    * Competes with JupyterBook, which is less mature.
* Quarto uses Jupyter under the hood to perform computations.

::: {.notes}
I've opened four issues with Quarto so far, and community has been extremely
supportive. Two bugs were fixed right away, one bug was scheduled for a future
milestone, and the fourth was user error.
:::


## Quarto vs. Jupyter notebooks

* Both are [Literate Programming](https://en.wikipedia.org/wiki/Literate_programming)
  tools.
* Quarto uses Computational Markdown as its input format, so it's easier to
  version-control.
* _TODO: More!_


# Getting started

## Installing

You can install Quarto from `conda-forge`:

```
conda install -c conda-forge quarto
mamba install -c conda-forge quarto
```

Or you can install from the [official
sources](https://quarto.org/docs/download/) (Linux `.deb`/`.tar.gz`, Mac,
Windows)

::: {.callout-warning}
Use the official sources if you're rendering to PDF. See the README of this repo for
details!
:::


## Working on a project

[Project Basics doc](https://quarto.org/docs/projects/quarto-projects.html)


### Create a project

```
quarto create-project <project-name> --type=<website|book|default>
```


### Render your project

Turn your markdown files into your desired output format(s).

```
quarto render
```


### Preview your project

Render your project & serve it with a hot-reloading webserver!

```
quarto preview
```

::: {.notes}
Live demo this
:::


# Publish your project

## GitHub Actions / GitHub Pages prep-work

![GitHub Pages setup](/_media/github-pages-setup.png)

::: {.notes}
For simplicity, I prefer to use the "GitHub Actions" method rather than the
"Deploy from a branch" method to keep my repository history free of output
artifacts.
:::


## GitHub Action workflow definition

Quarto provides out-of-the-box GitHub Actions you can use to publish for free
to GitHub Pages.

* Great for basic use cases.
* You'll need custom actions if your Quarto document(s) require third-party libraries.

[Example](https://github.com/nsidc/quarto-demo/blob/main/.github/workflows/publish-to-github-pages.yml)


# Quarto for QGreenland workshops

* [Educator workshop](https://qgreenland-workshop-2023-educator.github.io/)

* [Researcher workshop](https://qgreenland-workshop-2023-researcher.github.io/)


## Relatively simple for non-technical users

We set up the educator workshop GitHub repo with GitHub actions, then our
team's education expert set to work on creating a beautiful site through the
GitHub web interface.


# Fin

We'd love suggestions on how to best present Quarto to a non-developer audience.

Read more about [caveats](/caveats.html)!
